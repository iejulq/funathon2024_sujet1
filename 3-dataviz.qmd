---
lang: fr-FR
title: Datavisualisation des données sur une carte avec le package leaflet

format:
  html:
    number-sections: true
    css: style/custom_styles.css

execute: 
  eval: true
---

{{< include utils/_setup.qmd >}}

Cette dernière partie du sujet consiste à visualiser les émissions de CO2 précédemment calculées sur une carte interactive avec le package [leaflet](https://leafletjs.com/) et des fonds de carte de [Stadia Maps](https://stadiamaps.com/) afin d'identifier visuellement les liaisons aériennes les plus émissives.


::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 5 : Visualiser des données géographiques

1. De la même manière que pour TravelTime, il est nécessaire de se créer un compte sur [Stadia Maps](https://client.stadiamaps.com/signup/?utm_content=top_nav_signup&utm_source=marketing_site) afin d'avoir accès à leur API. 

2. Une fois que votre compte est créé et vérifié votre compte, créez une *property* et nommez la *"funathon"*.

3. Cliquer sur *Add API Key*, puis la copier dans le fichier `secrets.yaml` créé dans lors de l'exercice 1.


   ```{.yaml filename="secrets.yaml"}
   stadiaMaps:
     API_KEY: "votre_clé_api_ici"
   ```

4. L'API de `Stadia Maps` permet de récupérer des fonds de carte avec des styles différents en fonction des besoins et préféreces. En s'aidant de la [documentation de l'API](https://docs.stadiamaps.com/), reconstituer l'URL qui récupère une tuile Stadia Maps pour un style donné.


::::{.callout-note}
A la différence de l'API de routage de TravelTime, l'API de Stadia Maps pour obtenir un fond de carte est plus simple d'utilisation puisque la requête HTTP se fait simplement via un lien HTML (sans JSON). En effet, nous utilisons la méthode **GET** et l'authentification se fait directement via l'URL (ce qui n'est pas optimal en terme de sécurité).
::::

<details>
<summary>Afficher l'aide</summary>
</summary>

::::{.callout-tip}
Pour récupérer le format de l'URL vous pouvez regarder ces pages de la documentation :

- [Raster Map Tiles](https://docs.stadiamaps.com/raster/)
- [Map Styles](https://docs.stadiamaps.com/map-styles/alidade-smooth/)
::::

</details>

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll


secrets <- yaml::read_yaml("secrets.yaml")

STADIA_MAPS_API_KEY <- secrets$stadiaMaps$API_KEY

STYLE <- "outdoors"

TILES_URL <- sprintf("https://tiles.stadiamaps.com/tiles/%s/{z}/{x}/{y}{r}.png?api_key=%s", STYLE, STADIA_MAPS_API_KEY)
``` 

5. Créer un dataframe avec tous les éléments pour cartographier les émissions sur les lignes repérées (les noms, les latitudes et les longitudes des villes de départ et d'arrivée, et les émissions de CO2 des lignes associées)


```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

GCO2_PER_PKT <- 80

emission_by_route_list <- list()

for (pair in city_pairs) {
  coordinates <- lapply(names(pair), get_station_coordinates, data = stations_data, verbose = FALSE)
  emissions <- get_air_traffic_between_cities(pair[1], pair[2], air_traffic_df) * GCO2_PER_PKT / 1000000

  # Ajouter les données à la liste
  emission_by_route_list[[length(emission_by_route_list) + 1]] <- list(
    city1 = pair[1],
    city2 = pair[2],
    lat1 = coordinates[[1]][1],
    lng1 = coordinates[[1]][2],
    lat2 = coordinates[[2]][1],
    lng2 = coordinates[[2]][2],
    emissions = emissions
  )
}

emission_by_route_df <- dplyr::bind_rows(emission_by_route_list)
```

<details>
<summary>Afficher les données</summary>
</summary>

```{r}
#| echo: false
#| output: true
#| df-print: kable

kableExtra::kbl(emission_by_route_df,
  "markdown",
  escape = FALSE,
  booktabs = TRUE
) |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
``` 

</details>

6. Créer une carte de base avec le fond de carte Stadia Maps avec la fonction *addTiles* de `leaflet`

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

map <- leaflet::leaflet() |>
  leaflet::addTiles(urlTemplate = TILES_URL)
```

7. Faire une boucle pour ajouter toutes les lignes repérées à la carte avec la fonction *addPolylines* de `leaflet` :

  - Si les émissions sont non-nulles, on les affiche en rouge avec une épaisseur de trait proportionnelle aux émissions
  - Si les émissions sont nulles, on les affiche en noir en trait fin

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

# Parcourir chaque ligne du dataframe
for (i in 1:nrow(emission_by_route_df)) {
  # Définir les options par défaut pour les lignes
  lat_vector <- c(emission_by_route_df$lat1[i], emission_by_route_df$lat2[i])
  lng_vector <- c(emission_by_route_df$lng1[i], emission_by_route_df$lng2[i])
  color <- "black" # couleur par défaut
  opacity <- 0.5
  weight <- 1 # poids par défaut

  # Si les émissions sont supérieures à zéro, ajuster la couleur et le poids
  if (emission_by_route_df$emissions[i] > 0) {
    color <- "red"
    weight <- emission_by_route_df$emissions[i] / 10000
  }

  # Ajouter des lignes à la carte
  map <- map |>
    leaflet::addPolylines(lat = lat_vector, lng = lng_vector, color = color, opacity = opacity, weight = weight)
}
```

8. Faire une boucle pour ajouter toutes les villes à la carte avec la fonction *addCircleMarkers* de `leaflet`.



```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll


# Définir les options de label personnalisées
custom_label_options <- leaflet::labelOptions(noHide = TRUE, style = list("background" = "rgba(255, 255, 255, 0.5)"))

# Fonction pour ajouter des marqueurs circulaires
add_circle_marker <- function(map, lat, lng, city, label_options) {
  map |>
    leaflet::addCircleMarkers(
      lat = lat,
      lng = lng,
      radius = 5,
      color = "#4444AA",
      label = as.character(city),
      labelOptions = label_options
    )
}

# Boucle pour ajouter des marqueurs pour chaque ligne du dataframe
for (i in 1:nrow(emission_by_route_df)) {
  map <- add_circle_marker(map, emission_by_route_df$lat1[i], emission_by_route_df$lng1[i], emission_by_route_df$city1[i], custom_label_options)
  map <- add_circle_marker(map, emission_by_route_df$lat2[i], emission_by_route_df$lng2[i], emission_by_route_df$city2[i], custom_label_options)
}
```

9. Afficher la carte


```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

map
```

::: 


```{ojs}
//| echo: false
import { button } from "@jeremiak/download-data-button"
```