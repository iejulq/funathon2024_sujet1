---
lang: fr-FR
title: Interaction avec l'API de routage de TravelTime

format:
  html:
    number-sections: true
    css: style/custom_styles.css
---

La première partie du sujet consiste à interroger basiquement l'API de routage de TravelTime qui permet obtenir des données de temps de trajet entre deux points définis par leurs coordoonées géographiques.

Nous allons tout d'abord présenter comment construire une requête pour communiquer avec l'API de [TravelTime](https://account.traveltime.com/) afin de récupérer les données de temps de trajet. Avant cela, il va falloir effectuer plusieurs étapes préliminaires.

::: callout-note
## Qu'est ce qu'une API ?

Une API est une interface logicielle (Application Programming Interface) qui permet à des applications de communiquer entre elles. Ces interfaces utilisent en général des requêtes HTTP contenant des JSON pour envoyer et recevoir des données.
:::

Tout d'abord, il est nécessaire de créer un compte sur [TravelTime](https://account.traveltime.com/) afin de pouvoir accéder à leur API grâce à un identifiant et un mot de passe. Si vous avez un compte Github, l'authentification via ce canal est plus simple. Autrement, il va falloir utiliser votre adresse email professionnelle et renseigner votre numéro de téléphone. Nous sommes conscient que cela peut constituer un frein pour certaines personnes, et si vous ne souhaitez pas vous inscrire sur cette API privée il sera tout de même possible de réaliser la visualisation des résultats grâce aux données issues de l'API mis à votre disposition.

::: callout-warning
Le mail de confirmation de l'API peut mettre plusieurs minutes avant d'arriver, notamment si vous êtes sur un poste avec un proxy et sécurisé.

:::

Une fois que votre compte est créé, lorsque vous vous dirigez vers l'onglet `Dashboard` vous devriez avoir accès à votre ID et votre clé pour communiquer avec l'API, nous allons les stocker dans une fichier `.yaml` Ces informations sont personnelles et ne doivent pas être partagées, et encore moins être mises sur Github.

::: callout-note
## Qu'est ce qu'un fichier yaml ?

C'est un format de fichier simplifié qui permet de stocker des données structurées à la manière d'un fomart CSV, JSON ou XML. Il est souvent utilisé pour stocker des configurations de programme.
:::

::: {.callout-tip collapse="false" icon="false"}
## <i class="bi bi-book"></i> Exercice 1 : Se familiariser avec l'API de TravelTime

1.  Créer un compte sur [TravelTime](https://account.traveltime.com/) et récupérer les identifiants, les stocker dans un fichier `secrets.yaml` comme ci-dessous :

    ``` {.yaml filename="secrets.yaml"}
    travelTime:
      X_API_ID: "votre_id_api_ici"
      X_API_KEY: "votre_clé_api_ici"
    ```

2.  Afin de prévenir un malencontreux commit de ce fichier, le rajouter dans le `.gitignore` du projet afin qu'il ne soit pas *poussé* sur Github.

    ``` {.yaml filename=".gitignore"}
    /.quarto/
    /_site/
    /site_libs/
    /*_cache/
    .Rproj.user
    secrets.yaml
    ```

3.  On va pouvoir tester l'API, mais avant toute chose, prendre le temps de jeter un coup d'oeil à la documentation de l'API ([ici](https://docs.traveltime.com/api/overview/introduction)). Se rendre sur le [*playground*](https://playground.traveltime.com/routes) de l'API pour se familiariser avec son fonctionnement.

Afin de vérifier que nous arrivons à communiquer avec l'API, nous allons effectuer la même requête présentée dans le playground directement dans notre console R.

4.  Grâce au package `yaml`, importer le contenu du fichier `secrets.yaml` et stocker le contenu dans les variables `X_API_ID` et `X_API_KEY`.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

secrets <- yaml::read_yaml("secrets.yaml")
X_API_ID <- secrets$travelTime$X_API_ID
X_API_KEY <- secrets$travelTime$X_API_KEY
```

5.  En lisant la documentation, ou en observant bien le *playgroud* trouver le *endpoint* de l'API de routage. Il s'agit de l'URL via lequel nous allons communiquer avec l'API. Stocker la dans la variable `ROUTES_API_URL`.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

ROUTES_API_URL <- "https://api.traveltimeapp.com/v4/routes"
```

6.  Copier-coller la requête utilisée dans l'exemple du *playground*. Il s'agit du corps de la requête, généralement celui-ci est spécifié au format JSON.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

request_body <- '
{
  "locations": [
    {
      "id": "point-from",
      "coords": {
        "lat": 51.5119637,
        "lng": -0.1279543
      }
    },
    {
      "id": "point-to-1",
      "coords": {
        "lat": 51.5156177,
        "lng": -0.0919983
      }
    }
  ],
  "departure_searches": [
    {
      "id": "departure-search",
      "transportation": {
        "type": "public_transport"
      },
      "departure_location_id": "point-from",
      "arrival_location_ids": [
        "point-to-1"
      ],
      "departure_time": "2024-06-26T18:00:00.000Z",
      "properties": [
        "travel_time",
        "route"
      ],
      "range": {
        "enabled": true,
        "max_results": 5,
        "width": 900
      }
    }
  ]
}'
```

7.  Avec le package `httr`, définir l'en-tête de la requête, celle-ci doit contenir l'ID et la clé afin que l'API puisse bien vous identifier et renvoyer une réponse.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

headers <- httr::add_headers(
  "Content-Type" = "application/json",
  "X-Application-Id" = X_API_ID,
  "X-Api-Key" = X_API_KEY
)
```

8.  Il est dès à présent possible d'envoyer une requête. On va utiliser ici la méthode POST, notamment car on a besoin d'une authentification. Pour aller un peu plus loin sur les différences entre les méthodes **GET** et **POST**, vous pouvez regarder ce [post](https://www.ionos.fr/digitalguide/sites-internet/developpement-web/get-vs-post/).

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

response <- httr::POST(ROUTES_API_URL, body = request_body, encode = "json", headers)

content <- httr::content(response)
```

9.  Vérifier que la requête a bien été reçue et traitée par l'API en regardant le code de retour, celui-ci doit être égal à 200. Si c'est bien le cas, regarder la réponse de l'API, elle devrait être similaire à ce qui est affiché ci-dessous.

```{r}
#| class-output: long-output
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

if (httr::status_code(response) == 200) {
  print("La requête a bien été traitée")
  content <- httr::content(response, as = "parsed")
  # print(content)
} else {
  # Affichage d'un message d'erreur si le code de la réponse n'est pas 200
  print(sprintf("Une erreur est survenue. Code de la réponse : %d", httr::status_code(response)))
}
```

10. Créer une fonction `get_travel_time_api_response()` qui renvoie la réponse de l'API de TravelTime pour un endpoint et une requête donnés.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

get_travel_time_api_response <- function(api_url, request_body) {
  # On prépare les headers
  headers <- httr::add_headers(
    "Content-Type" = "application/json",
    "X-Application-Id" = X_API_ID,
    "X-Api-Key" = X_API_KEY
  )
  ## On envoie la requête avec les headers spécifiés
  response <- httr::POST(api_url, body = request_body, encode = "json", headers)

  # On vérifie s'il y a eu une erreur
  if (!httr::http_error(response)) {
    return(list(
      "Content" = httr::content(response, as = "parsed"),
      "Status_code" = httr::status_code(response)
    ))
  } else {
    # On affiche une message d'avertissement lorsque la requête n'a rien renvoyé
    warning("Failed to retrieve data: ", httr::http_status(response)$message)
    return(list(
      "Content" = NA,
      "Status_code" = httr::status_code(response)
    ))
  }
}
```

11. Vérifier que votre fonction marche bien en utilisant la même requête que lors de la question 8 et comparez les réponses.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll


# ROUTES_API_URL : url de l'API requêtée
# requête 

response_from_function <- get_travel_time_api_response(ROUTES_API_URL, request_body)
```

12. Explorer attentivement la réponse avec la fonction *View* puis affecter la liste des descriptions des itinéraires trouvés à une variable `list_itinerary` (liste nommée *properties* dans le JSON).

```{r}
#| class-output: long-output
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

View(response_from_function)

list_itinerary <- response_from_function[[1]]$results[[1]]$locations[[1]]$properties
print(list_itinerary)
```
:::
