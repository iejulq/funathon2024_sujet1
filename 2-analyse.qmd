---
lang: fr-FR
title: Exploration des données issues de l'API de TravelTime

format:
  html:
    number-sections: true
    css: style/custom_styles.css
---

{{< include utils/_setup.qmd >}}

# Récupération des coordonnées des villes françaises

L'objectif de cette partie est de récupérer les coordonnées géographiques des gares françaises à partir d'une base de données disponible en accès ouvert sur [data.gouv.fr](https://www.data.gouv.fr/).


:::{.callout-note}
## Comment télécharger un CSV dans un programe R ?
Il suffit de copier-coller le lien de téléchargement d'un fichier CSV dans la fonction `read.csv` ou `read.csv2` (exemple : `read.csv("lien_de_téléchargement")`)
:::


::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 2 : Travailler avec des données géographiques

1. Sur [data.gouv.fr](https://www.data.gouv.fr/), chercher le jeu de données correspondant à la liste des gares.

2. Importer le jeu de données au format csv dans votre console R, sans télécharger localement le fichier. Observer les données.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

# On définit l'URL des données
STATIONS_DATA_URL <- "https://www.data.gouv.fr/fr/datasets/r/d22ba593-90a4-4725-977c-095d1f654d28"

stations_data <- read.csv2(STATIONS_DATA_URL)
```

<details>
<summary>Afficher les données</summary>
</summary>

```{r}
#| echo: false
#| output: true
#| df-print: kable

# On définit l'URL des données

stations_data_to_print <- stations_data

kableExtra::kbl(stations_data_to_print,
                "html",
                escape = FALSE,
                booktabs = TRUE
) |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) |>
  kableExtra::scroll_box(width = "100%", height = "350px")
``` 

</details>

3. Utiliser cette base de données qui contient, entre autres, les coordonnées géographiques des gares françaises afin d'extraire un couple de coordonnées (latitude, longitude) à partir d'un nom de gare. Faire un test en affichant les coordonnées de la gare de Lille-Flandres.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

STATION_NAME <- "Lille-Flandres"

coords <- stations_data |>
  dplyr::select(lng = x_wgs84, lat = y_wgs84, libelle) |>
  dplyr::filter(libelle == STATION_NAME) |>
  dplyr::summarise(lat = dplyr::first(as.numeric(lat)), lng = dplyr::first(as.numeric(lng))) |>
  unlist(use.names = FALSE)
```

4. Encapsuler le code précédent dans une fonction renvoyant les coordonnées d'une gare à partir de la chaîne de caractère du nom de la gare. Faire un test en affichant les coordonnées de la gare de Toulouse-Matabiau.

::::{.callout-warning}
Dans le jeu de données des stations de France, le point géographique pour la gare de Strasbourg-Ville si situe au milieu des rails... point qui est considéré inatteignable pour l'API de TravelTime. Utiliser le point $(48.584488, 7.735626)$ pour cette gare, qui correspond à l'entrée de la gare.
::::

```{r}

renvoyer_coords_gare<-function(STATION_NAME){
  coords <- stations_data |>
    dplyr::select(lng = x_wgs84, lat = y_wgs84, libelle) |>
    dplyr::filter(libelle == STATION_NAME) |>
    dplyr::summarise(lat = dplyr::first(as.numeric(lat)), lng = dplyr::first(as.numeric(lng))) |>
    unlist(use.names = FALSE)
  
  return(coords)
  
  
}


res<-renvoyer_coords_gare("Toulouse-Matabiau")# [1] 43.610699  1.454396

res2<-renvoyer_coords_gare("Strasbourg-Ville")# [1] 48.582870  7.731595

```


```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll


get_station_coordinates <- function(station, data, verbose = TRUE) {
  if (station != "Strasbourg-Ville") {
    coords <- data |>
      dplyr::select(lng = x_wgs84, lat = y_wgs84, libelle) |>
      dplyr::filter(libelle == station) |>
      dplyr::summarise(lat = dplyr::first(as.numeric(lat)), lng = dplyr::first(as.numeric(lng))) |>
      unlist(use.names = FALSE)
  } else {
    coords <- c(48.584488, 7.735626)
  }
  
  # Si verbose est TRUE, on affiche les coordonnées
  if (verbose) {
    cat(sprintf("%s -> (%f, %f)\n", station, coords[1], coords[2]))
  }
  
  return(coords)
}

tlse_coords <- get_station_coordinates("Toulouse-Matabiau", stations_data, verbose = TRUE)
```

::: 


# Obtention du temps de transport entre 2 villes

L'objectif de cette partie est de récupérer le temps de transport entre deux gares à partir de leur nom en combinant la fonction `get_travel_time_api_response()` donnée dans la fonction `get_travel_time_api_response()` et la fonction `get_station_coordinates()`.

::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 3 : Calcul du temps de transport

1. Créer une fonction qui prend en paramètres deux couples de coordonnées et qui renvoie un JSON (en chaine de caractère) destiné à l'API de routage. Utilisez ces paramètres par défaut dans votre corps de requête :

-   Lieu de départ : Variable (coords1)
-   Lieu d'arrivée : Variable (coords2)
-   Mode de transport : Transport public (bus, métro, tram, train)
-   Date et heure : 2024-06-26 à 18h00 UTC
-   Flexibilité : 12h00
-   Le reste des paramètres par défaut



```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

get_routes_api_json <- function(coords1, coords2) {
  # On créé le JSON pour l'API de routage en se basant sur celui de la sous-partie "Interaction avec l'API de routage de TravelTime"
  request_body <- sprintf('{
    "locations": [
      {
        "id": "point-from",
        "coords": {
          "lat": %f,
          "lng": %f
        }
      },
      {
        "id": "point-to-1",
        "coords": {
          "lat": %f,
          "lng": %f
        }
      }
    ],
    "departure_searches": [
      {
        "id": "departure-search",
        "transportation": {
          "type": "public_transport",
          "walking_time": 900,
          "cycling_time_to_station": 100,
          "parking_time": 0,
          "boarding_time": 0,
          "driving_time_to_station": 1800,
          "pt_change_delay": 0,
          "disable_border_crossing": false
        },
        "departure_location_id": "point-from",
        "arrival_location_ids": [
          "point-to-1"
        ],
        "departure_time": "2024-06-26T18:00:00.000Z",
        "properties": [
          "travel_time",
          "route"
        ],
        "range": {
          "enabled": true,
          "max_results": 5,
          "width": 43200
        }
      }
    ]
  }', coords1[1], coords1[2], coords2[1], coords2[2])
  return(request_body)
}
```

2. En utilisant la fonction précédement écrite, créer une fonction qui prend en paramètre deux noms de gares et qui renvoie le temps (en heure) de transport du trajet le plus court entre ces 2 gares. Il faudra prendre soin de gérer le cas où aucun trajet n'est trouvé en renvoyant *Inf*.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

get_travel_time_between_stations <- function(station1, station2, data, verbose = TRUE) {
  # Si les stations sont identiques aucun trajet nécessaire
  if (station1 == station2) {
    return(NA)
  }
  
  
  # Récupérer les coordonnées pour les deux stations
  coordinates <- lapply(c(station1, station2), get_station_coordinates, data = data, verbose = FALSE)
  
  # Générer le JSON (la requête envoyée à l'API) pour l'API de routage
  request_body <- get_routes_api_json(coordinates[[1]], coordinates[[2]])
  
  # Interroger l'API de routage
  response <- get_travel_time_api_response(ROUTES_API_URL, request_body)
  
  # Gérer la limitation du taux d'API
  if (response[[2]] == 429) {
    if (verbose) cat("Trop de requêtes, attente d'une minute...\n")
    Sys.sleep(60)
    return(get_travel_time_between_stations(station1, station2, data, verbose))
  }
  
  # Vérifier l'existence d'un itinéraire valide
  if (length(response[[1]]$results[[1]]$locations) == 0) {
    travel_time <- Inf
  } else {
    # Extraire les données de temps de trajet et trouver le temps de trajet minimum en heures
    travel_times <- sapply(response[[1]]$results[[1]]$locations[[1]]$properties, function(item) item$travel_time)
    travel_time <- min(travel_times) / 3600
  }
  
  # Afficher le temps de trajet si verbose
  if (verbose) {
    message_text <- sprintf("%s -> %s : %s heures\n", station1, station2, ifelse(is.infinite(travel_time), "Aucun itinéraire trouvé", round(travel_time, 2)))
    cat(message_text)
  }
  
  return(travel_time)
}
```

3. Tester votre fonction avec Paris-Montparnasse et Toulouse-Matabiau.

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

travel_time <- get_travel_time_between_stations("Paris-Montparnasse", "Toulouse-Matabiau", stations_data, verbose = TRUE)
```

4. Faire une matrice temporelle des temps de trajet entre les gares des 10 plus grandes agglomérations françaises (on considerera que la matrice est symétrique pour la compléter plus rapidement). La liste des noms des gares principales (telle qu'écrite dans la base de données en opendata) des 10 plus grandes agglomérations françaises est la suivante : Paris-Nord, Lyon-Perrache, Marseille-St-Charles, Toulouse-Matabiau, Lille-Flandres, Bordeaux-St-Jean, Nice-Ville, Nantes, Strasbourg-Ville et Montpellier-St-Roch.

## Ma solution

```{r}

list_gares<-expand.grid(gare1=c("Paris-Nord", "Lyon-Perrache","Marseille-St-Charles","Toulouse-Matabiau", "Lille-Flandres","Bordeaux-St-Jean", "Nice-Ville","Nantes","Strasbourg-Ville", "Montpellier-St-Roch"),gare2=c("Paris-Nord", "Lyon-Perrache","Marseille-St-Charles","Toulouse-Matabiau", "Lille-Flandres","Bordeaux-St-Jean", "Nice-Ville","Nantes","Strasbourg-Ville", "Montpellier-St-Roch")) %>% filter(!(gare1==gare2))

matrice<-purrr::map2(list_gares$gare1,list_gares$gare2,  function(x,y) get_travel_time_between_stations(x,y,stations_data, verbose = FALSE))

matrice<-matrice %>% unlist()


library(tidyverse)

tab<-data.frame(gare_depart=list_gares$gare1,gare_arrivee=list_gares$gare2,time=matrice)%>%
  filter(!(tab$gare_depart==tab$gare_arrivee))

tab<-tab %>%
  filter(!(tab$gare_depart==tab$gare_arrivee))

mat<-tab%>% 
  pivot_wider(id_cols=gare_depart,names_from=gare_arrivee,values_from=time) 


mat<-mat %>% mutate(across(where(is.numeric), ~round(.x,2)))

# transformer en matrice !!! 

```


::::{.callout-warning}
## L'API de routage de TravelTime a un quota de requêtes par minute
Si la fonction `get_travel_time_api_response()` donnée dans la partie 1 renvoie le code **429**, cela signifie que vous avez dépassé le quota de requêtes par minute. Dans ce cas, attendez une minute avec la fonction `Sys.sleep(60)` avant de relancer la fonction précédement écrite.
::::

#Correction 

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

# Define the stations
STATIONS <- c("Paris-Nord", "Lyon-Perrache", "Marseille-St-Charles", "Toulouse-Matabiau", "Lille-Flandres", "Bordeaux-St-Jean", "Nice-Ville", "Nantes", "Strasbourg-Ville", "Montpellier-St-Roch")

# Initialisation de la matrice
time_matrix <- matrix(NA, nrow = length(STATIONS), ncol = length(STATIONS), dimnames = list(STATIONS, STATIONS))

# On remplit la matrice avec toutes les pairs possibles
combinations <- combn(STATIONS, 2, simplify = FALSE) # combinaison, ok, 45 couples possibles (2 elements dans une liste de 10)

for (pair in combinations) {
  travel_time <- get_travel_time_between_stations(pair[1], pair[2], stations_data, verbose = FALSE)
  time_matrix[pair[1], pair[2]] <- round(travel_time, 2)
  time_matrix[pair[2], pair[1]] <- round(travel_time, 2)
}
```

<details>
<summary>Afficher la matrice</summary>
</summary>

```{r}
#| echo: false
#| output: true
#| df-print: kable

kableExtra::kbl(time_matrix,
                "markdown",
                escape = FALSE,
                booktabs = TRUE
) |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
``` 

</details>

```{ojs}
//| echo: false
import { button } from "@jeremiak/download-data-button"
transformData = (data) => {
return data.map(item => {
const { _row, ...rest } = item;
const newItem = { Gare: _row, ...rest };
return newItem;
});
};

// Transform the data
transformedData = transformData(transpose(data))

```

```{ojs}
button(transformedData, "time-matrix.csv")
```

5. Créer une liste avec les couples des gares reliées par un temps de trajet inférieur à 4h30

# Moi 
```{r}

liste_couple_gares<-tab %>% 
  filter(time <4.5) 

mat<-as.matrix(mat)
mat_tri<-lower.tri(mat)

indices_couples<-which(mat < 4.5 & mat_tri ,arr.ind = TRUE)

routes<-purrr::map2(indices_couples[, 1] ,indices_couples[, 2], function(i, j) c(unique(list_gares$gare1)[i], unique(list_gares$gare1)[j]),
                    SIMPLIFY = FALSE,
                    USE.NAMES = FALSE
)


```



```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

THRESHOLD <- 4.5

# On garde seulement la matrice triangulaire inférieur (car on la supposé symmétrique)
lower_tri_matrix <- lower.tri(time_matrix)

# On extrait les indices où la condition n'est pas respectée
under_threshold_indices <- which(time_matrix < THRESHOLD & lower_tri_matrix, arr.ind = TRUE)

# On crée une liste de paires qui remplissent les conditions
under_threshold_routes <- mapply(function(i, j) c(STATIONS[i], STATIONS[j]),
                                 i = under_threshold_indices[, 1],
                                 j = under_threshold_indices[, 2],
                                 SIMPLIFY = FALSE,
                                 USE.NAMES = FALSE
)
```

:::

# Téléchargement et traitement des données de trafic aérien entre deux villes

Cette partie du sujet consiste à télécharger et traiter des données de trafic aérien entre deux aéroports en 2019 pour calculer les émissions de CO2 du trafic aérien entre les couples de villes/de gares identifiés précédemment et d'en déduire les émissions de CO2 approximatives évitées avec des mesures hypothétiques d'interdictions de liaisons aériennes.

::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 4 : Analyse du trafic aérien

1. Sur [data.gouv.fr](https://www.data.gouv.fr/), trouver le jeu de données correspondant au trafic aérien publié par la DGAC.

2. Importer le jeu de données au format csv de l'année 2019 dans votre console R, sans télécharger localement le fichier. Observer les données.





```{r}

trafic_aerien_url<-"https://www.data.gouv.fr/fr/datasets/r/0c0a451e-983b-4f06-9627-b5ff1bccd2fc"


trafic_aerien<-read.csv2(trafic_aerien_url)

knitr::kable(head(trafic_aerien))

```



```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

# On définit l'URL des données
AIR_TRAFFIC_DATA_URL <- "https://www.data.gouv.fr/fr/datasets/r/0c0a451e-983b-4f06-9627-b5ff1bccd2fc"

air_traffic_df <- read.csv2(AIR_TRAFFIC_DATA_URL)

```

<details>
<summary>Afficher les données</summary>
</summary>

```{r}
#| echo: false
#| output: true
#| df-print: kable

air_traffic_df_to_print <- air_traffic_df

kableExtra::kbl(air_traffic_df_to_print,
                "html",
                escape = FALSE,
                booktabs = TRUE
) |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) |>
  kableExtra::scroll_box(width = "100%", height = "350px")
``` 

</details>

::::{.callout-warning}
## Attention aux données agrégées
Le fichier Excel de documentation *series-asp-dgac-liste-v20231211b.xls* sur [data.gouv.fr](https://www.data.gouv.fr/) précise que les lignes aériennes de moins de 10 000 passagers équivalents pour un mois donné sont regroupées dans un groupement de lignes du mois associé, par exemple "ZZCC_MET_RAD" pour les liaisons métropolitaines radiales. Ainsi les données sur une ligne aérienne donnée ne sont pas toujours exhaustives.
::::

3. Créer une fonction qui renvoie le trafic total d'une liaison en 2019 en PKT (produit du nombre de passagers et de la distance parcourue) à partir des deux noms de villes (et non d'aéroport) en paramètre.

::::{.callout-tip}
1. Utiliser le fichier Excel de documentation disponible sur [data.gouv.fr](https://www.data.gouv.fr/) pour identifier les colonnes utiles.
2. Les noms des principaux aéroports de métropole contiennent le nom de la ville qu'il dessert.
3. N'oubliez pas de prendre en compte le trafic aérien dans les deux sens.
4. Paris qui possède 2 aéroports commerciaux.
::::

```{r}

ville_depart<-"LONDRES"
ville_arrivee<-"PARIS"

calculer_trafic_total<-function(ville_depart,ville_arrivee,data){
  
  trafic_total<-data %>%
    # filter(str_detect(LSN_DEP_NOM,ville_depart) & str_detect(LSN_ARR_NOM,ville_arrivee)) %>%
    filter(
      (grepl(ville_depart, LSN_DEP_NOM, ignore.case = TRUE) & grepl(ville_arrivee, LSN_ARR_NOM, ignore.case = TRUE)) |
        (grepl(ville_arrivee, LSN_DEP_NOM, ignore.case = TRUE) & grepl(ville_depart, LSN_ARR_NOM, ignore.case = TRUE))
    )%>% 
    select(LSN_DEP_NOM,LSN_ARR_NOM,LSN_PAX_FS,LSN_DIST) %>% 
    mutate(LSN_DEP_NOM=ville_depart,
           LSN_ARR_NOM=ville_arrivee) %>% 
    # group_by(LSN_DEP_NOM,LSN_ARR_NOM) %>% 
    summarise(trafic_total=sum(LSN_PAX_FS*LSN_DIST,na.rm=TRUE))
  
  return(trafic_total)
  
}

calculer_trafic_total("Paris","Toulouse",trafic_aerien)

test<-calculer_trafic_total(under_threshold_routes[[1]][1],under_threshold_routes[[1]][2],trafic_aerien)

result<-map(1:nrow(under_threshold_indices),function(i) calculer_trafic_total(under_threshold_routes[[i]][1],under_threshold_routes[[i]][2]))

under_threshold_routes[[2]][2]

```



```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

get_air_traffic_between_cities <- function(city1, city2, data) {
  # Calcul du trafic dans les deux sens city1 -> city2 et city2 -> city1
  total_traffic <- data |>
    dplyr::filter(
      (grepl(city1, LSN_DEP_NOM, ignore.case = TRUE) & grepl(city2, LSN_ARR_NOM, ignore.case = TRUE)) |
        (grepl(city2, LSN_DEP_NOM, ignore.case = TRUE) & grepl(city1, LSN_ARR_NOM, ignore.case = TRUE))
    ) |>
    dplyr::summarise(traffic = sum(LSN_DIST * LSN_PAX_loc)) |> # calcul du PKT
    dplyr::pull(traffic)
  
  return(as.numeric(total_traffic))
}
```

4. Tester la fonction avec Paris et Toulouse

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

get_air_traffic_between_cities("Paris", "Toulouse", air_traffic_df)
```

5. Sommer le trafic aérien pour chaque couple de villes reliées par un temps de trajet inférieur à 4h30

::::{.callout-tip}
Les noms des principales gares de métropole contiennent le nom de la ville qu'il dessert.
::::

```{r}

# récuperer les noms des villes 


station<-under_threshold_routes[[1]][1]

# Pour un element de la liste des routes 

extraire_nom<-function(station){
str_split(station,"-")[[1]][1]
}

# pour tous les elements 

sapply(under_threshold_routes[[1]], function(x) str_split(x,"-")[[1]][1])

```





```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll
#| eval: false

# Fonction pour extraire les noms des villes à partir des noms des gares
extract_city_name <- function(station) {
  sapply(station, function(x) strsplit(x, "-")[[1]][1])
}

# Extraire les paires de villes
city_pairs <- lapply(under_threshold_routes, extract_city_name)

under_threshold_air_traffic <- 0

# Calculer le trafic aérien pour chaque paire
for (pair in city_pairs) {
  air_traffic <- get_air_traffic_between_cities(pair[1], pair[2], air_traffic_df)
  under_threshold_air_traffic <- under_threshold_air_traffic + air_traffic
}
```


6. En déduire les émissions de CO2 approximatives évitées que représente ce trafic avec une estimation des gCO2éq par PKT de [statista](https://www.statista.com/statistics/1113177/co2-emissions-by-airline-europe/)

```{r}
#| code-fold: true
#| code-summary: Cliquer pour voir la réponse
#| code-overflow: scroll

GCO2_PER_PKT <- 80

# On estime les émissions de CO2 en tCO2éq
cat(sprintf("En 2019, environ %.2f tCO2éq aurait pu être évités", under_threshold_air_traffic * GCO2_PER_PKT / 1000000))
```

:::
